{"name": "test_InvalidLogin", "status": "broken", "statusDetails": {"message": "TypeError: setup() missing 1 required positional argument: 'browser_setup'", "trace": "cls = <class '_pytest.runner.CallInfo'>, func = <function call_runtest_hook.<locals>.<lambda> at 0x10fa86e50>, when = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\nvenv/lib/python3.9/site-packages/_pytest/runner.py:311: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.9/site-packages/_pytest/runner.py:255: in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nvenv/lib/python3.9/site-packages/pluggy/hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nvenv/lib/python3.9/site-packages/pluggy/manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nvenv/lib/python3.9/site-packages/pluggy/manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\nvenv/lib/python3.9/site-packages/_pytest/nose.py:13: in pytest_runtest_setup\n    call_optional(item.parent.obj, \"setup\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobj = <test_Cases.test_Login.Test_001_Login object at 0x10fac25e0>, name = 'setup'\n\n    def call_optional(obj, name):\n        method = getattr(obj, name, None)\n        isfixture = hasattr(method, \"_pytestfixturefunction\")\n        if method is not None and not isfixture and callable(method):\n            # If there's any problems allow the exception to raise rather than\n            # silently ignoring them.\n>           method()\nE           TypeError: setup() missing 1 required positional argument: 'browser_setup'\n\nvenv/lib/python3.9/site-packages/_pytest/nose.py:38: TypeError"}, "start": 1658615503058, "stop": 1658615503058, "uuid": "65329cb6-dc41-4117-b7c8-31ce1f6a3a13", "historyId": "833e1c829c0f21e5cfb8dd678e81e0cb", "testCaseId": "1d91c58261bbeb96a6bc1c37d81cd02b", "fullName": "test_Cases.test_Login.Test_001_Login#test_InvalidLogin", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "test"}, {"name": "parentSuite", "value": "test_Cases"}, {"name": "suite", "value": "test_Login"}, {"name": "subSuite", "value": "Test_001_Login"}, {"name": "host", "value": "Umshini-KaBafo.local"}, {"name": "thread", "value": "45314-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_Cases.test_Login"}]}